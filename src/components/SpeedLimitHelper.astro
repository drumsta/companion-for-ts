---
import PKnob from "@components/generic/PKnob.astro";
import PRadio from "@components/generic/PRadio.astro";
import PSlider from "@components/generic/PSlider.astro";
import i18next, { t } from "i18next";

const currentLanguage = i18next.language;
const speedUnitsOptions = [
  { key: "km/h", value: t("components.speed-limit.kph") },
  { key: "mph", value: t("components.speed-limit.mph") },
];

const minMaxSpeed = 30;
const maxMaxSpeed = 300;
const maxSpeedStep = 10;
const maxSpeedDataList = [30, 90, 160, 230, 300];
const speedlimitStep = 5;
const defaultSpeedLimit = 60;
const defaultMaxSpeed = 120;
const maxSpeedInfoTemplate = t("components.speed-limit.max-speed");
---

<!-- Speed Limit Component -->
<main
  id="speed-limit-component"
  class="flex flex-col justify-center items-center"
  data-speed-units={JSON.stringify(speedUnitsOptions)}
>
  <div
    id="speed-limit-section"
    title={t("components.speed-limit.title")}
    class="flex flex-col justify-center items-center"
  >
    <!-- Max Speed Info & Speed Units Selector -->
    <div class="flex flex-row items-center">
      <!-- Max Speed Info -->
      <span id="max-speed-info" class="ltr:mr-2 rtl:ml-2" data-text-template={maxSpeedInfoTemplate}>
        {maxSpeedInfoTemplate.replace("{{maxSpeed}}", defaultMaxSpeed.toLocaleString(currentLanguage))}
      </span>
      <!-- Speed Units Selector - Radio Group -->
      <PRadio
        id="speed-units-selector"
        options={speedUnitsOptions}
        uncheckedClass="bg-color-bg-subtle text-color-text"
        checkedClass="bg-color-primary-dark text-color-light"
        ariaLabel={t("components.speed-limit.select-speed-units")}
      >
        <span slot="radio-item">{"{{option.value}}"}</span>
      </PRadio>
    </div>
    <!-- Max Speed Selector - Slider -->
    <PSlider
      id="max-speed-selector"
      className="h-9 w-[18.75rem] mt-4 p-0.5"
      min={minMaxSpeed}
      max={maxMaxSpeed}
      currentValue={defaultMaxSpeed}
      step={maxSpeedStep}
      datalist={maxSpeedDataList}
      ariaLabeledBy="max-speed-info"
    />
    <!-- Speed Limit Selector - Knob -->
    <div class="mt-6 p-2.5">
      <PKnob
        id="speed-limit-selector"
        min={0}
        max={defaultMaxSpeed}
        currentValue={defaultSpeedLimit}
        step={speedlimitStep}
        size={300}
        text2={t("components.speed-limit.kph")}
        text3={t("components.speed-limit.mph")}
        ariaLabel={t("components.speed-limit.speed-limit")}
      />
    </div>
    <!-- Speed Limit Quick Buttons -->
    <div
      id="speed-limit-spinbutton"
      class="flex justify-center h-[3.125rem]"
      tabindex="0"
      role="spinbutton"
      aria-valuemin="0"
      aria-valuemax={defaultMaxSpeed}
      aria-valuenow={defaultSpeedLimit}
      aria-label={t("components.speed-limit.speed-limit")}
    >
      <button
        type="button"
        id="speed-limit-spinbutton-m-25"
        class="bg-color-negative-dark text-color-light w-[3.125rem]"
      >
        -{(25).toLocaleString(currentLanguage)}
      </button>
      <button
        type="button"
        id="speed-limit-spinbutton-m-10"
        class="bg-color-negative-dark text-color-light w-[3.125rem]"
      >
        -{(10).toLocaleString(currentLanguage)}
      </button>
      <button
        type="button"
        id="speed-limit-spinbutton-m-5"
        class="bg-color-negative-dark text-color-light w-[3.125rem]"
      >
        -{(5).toLocaleString(currentLanguage)}
      </button>
      <button
        type="button"
        id="speed-limit-spinbutton-p-5"
        class="bg-color-positive-dark text-color-light w-[3.125rem]"
      >
        +{(5).toLocaleString(currentLanguage)}
      </button>
      <button
        type="button"
        id="speed-limit-spinbutton-p-10"
        class="bg-color-positive-dark text-color-light w-[3.125rem]"
      >
        +{(10).toLocaleString(currentLanguage)}
      </button>
      <button
        type="button"
        id="speed-limit-spinbutton-p-25"
        class="bg-color-positive-dark text-color-light w-[3.125rem] ltr:mr-2 rtl:ml-2"
      >
        +{(25).toLocaleString(currentLanguage)}
      </button>
    </div>
  </div>
</main>

<script>
  import { SpeedLimitStore, speedLimitStore } from "@src/stores/speedLimitStore";
  import { rollingStockClassList } from "@src/data/rollingStockClass";

  const speedLimitHelper = "speedLimitHelper";
  const currentLanguage = document.documentElement.getAttribute("lang") ?? "en";
  const speedLimitComponent = document.getElementById("speed-limit-component") as HTMLElement;
  const maxSpeedInfo = document.getElementById("max-speed-info") as HTMLElement;
  const speedUnitsSelector = document.getElementById("speed-units-selector") as HTMLElement;
  const maxSpeedSelector = document.getElementById("max-speed-selector") as HTMLInputElement;
  const speedLimitSelector = document.getElementById("speed-limit-selector") as HTMLElement;
  const speedLimitSelectorText1 = document.getElementById("speed-limit-selector-text-1") as HTMLElement;
  const speedLimitSelectorText2 = document.getElementById("speed-limit-selector-text-2") as HTMLElement;
  const speedLimitSelectorText3 = document.getElementById("speed-limit-selector-text-3") as HTMLElement;
  const speedLimitSpinButton = document.getElementById("speed-limit-spinbutton") as HTMLElement;
  const speedLimitSpinButtonM25 = document.getElementById("speed-limit-spinbutton-m-25") as HTMLElement;
  const speedLimitSpinButtonM10 = document.getElementById("speed-limit-spinbutton-m-10") as HTMLElement;
  const speedLimitSpinButtonM5 = document.getElementById("speed-limit-spinbutton-m-5") as HTMLElement;
  const speedLimitSpinButtonP5 = document.getElementById("speed-limit-spinbutton-p-5") as HTMLElement;
  const speedLimitSpinButtonP10 = document.getElementById("speed-limit-spinbutton-p-10") as HTMLElement;
  const speedLimitSpinButtonP25 = document.getElementById("speed-limit-spinbutton-p-25") as HTMLElement;
  const speedUnitsOptions = JSON.parse(speedLimitComponent.getAttribute("data-speed-units") ?? "") as {
    key: string;
    value: string;
  }[];

  // Functions
  const convertSpeedValue = function convertSpeedValue(speedUnits: string, speedValue: number): number {
    const mphToKmhFactor = 1.609344;
    if (speedUnits === "km/h") return speedValue / mphToKmhFactor;
    if (speedUnits === "mph") return speedValue * mphToKmhFactor;
    return 0;
  };

  const normalizeSpeedValue = function normalizeSpeedValue(speedValue: number): string {
    if (speedValue < 10 && speedValue > 0) return (Math.trunc(speedValue * 10) / 10).toLocaleString(currentLanguage);
    return Math.trunc(speedValue).toLocaleString(currentLanguage);
  };

  // Elements Update
  const updateMaxSpeedElements = function updateMaxSpeedElements(): void {
    const maxSpeed = speedLimitStore.value.maxSpeed;

    speedLimitSelector.setAttribute("data-p-knob-range", maxSpeed.toString());
    maxSpeedInfo.innerHTML = (maxSpeedInfo.getAttribute("data-text-template") ?? "").replace(
      "{{maxSpeed}}",
      maxSpeed.toLocaleString(currentLanguage),
    );
    speedLimitSpinButton.setAttribute("aria-valuemax", maxSpeed.toString());
  };

  const updateSpeedLimitElements = function updateSpeedLimitElements(): void {
    const speedUnits = speedLimitStore.value.speedUnits;
    const speedLimit = speedLimitStore.value.speedLimit;
    const alternateSpeedUnits = speedUnitsOptions.find((option): boolean => option.key !== speedUnits)?.value ?? "";
    const alternateSpeedLimit = normalizeSpeedValue(convertSpeedValue(speedUnits, speedLimit));

    speedLimitSelectorText1.innerHTML = speedLimit.toLocaleString(currentLanguage);
    speedLimitSelectorText2.innerHTML =
      speedUnitsOptions.find((option): boolean => option.key === speedUnits)?.value ?? "";
    speedLimitSelectorText3.innerHTML = `${alternateSpeedLimit} ${alternateSpeedUnits}`;
    speedLimitSpinButton.setAttribute("aria-valuenow", speedLimit.toString());
  };

  // View Update
  const initView = function initView(): void {
    speedUnitsSelector.setAttribute("data-p-radio-group", speedLimitStore.value.speedUnits);
    maxSpeedSelector.setAttribute("data-p-slider", speedLimitStore.value.maxSpeed.toString());
    speedLimitSelector.setAttribute("data-p-knob-range", speedLimitStore.value.maxSpeed.toString());
    speedLimitSelector.setAttribute("data-p-knob-value", speedLimitStore.value.speedLimit.toString());
  };

  const updateSpeedUnitsView = function updateSpeedUnitsView(newKey: string): void {
    speedUnitsSelector.setAttribute("data-p-radio-group", newKey);
  };

  const updateMaxSpeedView = function updateMaxSpeedView(newValue: number): void {
    const min = Number(maxSpeedSelector.min);
    const max = Number(maxSpeedSelector.max);
    if (newValue < min) newValue = min;
    if (newValue > max) newValue = max;

    maxSpeedSelector.setAttribute("data-p-slider", newValue.toString());
  };

  const updateSpeedLimitView = function updateSpeedLimitView(newValue: number): void {
    if (newValue < 0) newValue = 0;
    if (newValue > speedLimitStore.value.maxSpeed) newValue = speedLimitStore.value.maxSpeed;

    speedLimitSelector.setAttribute("data-p-knob-value", newValue.toString());
  };

  // State Update
  const setSpeedUnitsState = function setSpeedUnitsState(newKey: string): void {
    speedLimitStore.setKey("speedUnits", newKey, speedLimitHelper);

    updateSpeedLimitElements();
  };

  const setMaxSpeedState = function setMaxSpeedState(newValue: number): void {
    speedLimitStore.setKey("maxSpeed", newValue, speedLimitHelper);

    if (newValue < speedLimitStore.value.speedLimit) updateSpeedLimitView(newValue);
    updateMaxSpeedElements();
  };

  const setSpeedLimitState = function setSpeedLimitState(newValue: number): void {
    speedLimitStore.setKey("speedLimit", newValue, speedLimitHelper);

    updateSpeedLimitElements();
  };

  // Events
  const onChangeSpeedUnitsSelector = function onChangeSpeedUnitsSelector(event: Event): void {
    if (!event.currentTarget) return;

    const customEvent = event as CustomEvent<string>;
    const newKey = customEvent.detail;

    setSpeedUnitsState(newKey);
  };

  const onChangeMaxSpeedSelector = function onChangeMaxSpeedSelector(event: Event): void {
    if (!event.currentTarget) return;

    const element = event.currentTarget as HTMLInputElement;
    const newValue = Number(element.value);

    setMaxSpeedState(newValue);
  };

  const onChangeSpeedLimitSelector = function onChangeSpeedLimitSelector(event: Event): void {
    if (!event.currentTarget) return;

    const customEvent = event as CustomEvent<number>;
    const newValue = Number(customEvent.detail);

    setSpeedLimitState(newValue);
  };

  const onClickSpeedLimitSpinButtonM25 = function onClickSpeedLimitSpinButtonM25(event: Event): void {
    if (!event.currentTarget) return;

    const value = Number(speedLimitSelector.getAttribute("data-p-knob-value") ?? "0");
    updateSpeedLimitView(value - 25);
  };

  const onClickSpeedLimitSpinButtonM10 = function onClickSpeedLimitSpinButtonM10(event: Event): void {
    if (!event.currentTarget) return;

    const value = Number(speedLimitSelector.getAttribute("data-p-knob-value") ?? "0");
    updateSpeedLimitView(value - 10);
  };

  const onClickSpeedLimitSpinButtonM5 = function onClickSpeedLimitSpinButtonM5(event: Event): void {
    if (!event.currentTarget) return;

    const value = Number(speedLimitSelector.getAttribute("data-p-knob-value") ?? "0");
    updateSpeedLimitView(value - 5);
  };

  const onClickSpeedLimitSpinButtonP5 = function onClickSpeedLimitSpinButtonP5(event: Event): void {
    if (!event.currentTarget) return;

    const value = Number(speedLimitSelector.getAttribute("data-p-knob-value") ?? "0");
    updateSpeedLimitView(value + 5);
  };

  const onClickSpeedLimitSpinButtonP10 = function onClickSpeedLimitSpinButtonP10(event: Event): void {
    if (!event.currentTarget) return;

    const value = Number(speedLimitSelector.getAttribute("data-p-knob-value") ?? "0");
    updateSpeedLimitView(value + 10);
  };

  const onClickSpeedLimitSpinButtonP25 = function onClickSpeedLimitSpinButtonP25(event: Event): void {
    if (!event.currentTarget) return;

    const value = Number(speedLimitSelector.getAttribute("data-p-knob-value") ?? "0");
    updateSpeedLimitView(value + 25);
  };

  const onChangeSpeedLimitStore = function onChangeSpeedLimitStore(
    key: keyof SpeedLimitStore,
    value: SpeedLimitStore[keyof SpeedLimitStore] | undefined,
    source?: string,
  ): void {
    if (source === speedLimitHelper || typeof value === "undefined") return;

    if (key === "speedUnits") {
      const newKey = value.toString();
      updateSpeedUnitsView(newKey);
    }

    if (key === "maxSpeed") {
      const newValue = Number(value);
      updateMaxSpeedView(newValue);
    }

    if (key === "speedLimit") {
      const newValue = Number(value);
      updateSpeedLimitView(newValue);
    }

    if (key === "rollingStock" && value !== "") {
      const newValue = value.toString();
      const rollingStock = rollingStockClassList.find(
        (rollingStockClass): boolean => rollingStockClass.rollingStockClass === newValue,
      );

      if (!rollingStock) return;

      updateSpeedUnitsView(rollingStock.speedUnits);
      updateMaxSpeedView(rollingStock.maximumSpeed);
    }
  };

  // Init
  initView();
  updateMaxSpeedElements();
  updateSpeedLimitElements();

  speedUnitsSelector.addEventListener("change", onChangeSpeedUnitsSelector, { passive: true });
  maxSpeedSelector.addEventListener("change", onChangeMaxSpeedSelector, { passive: true });
  speedLimitSelector.addEventListener("change", onChangeSpeedLimitSelector, { passive: true });
  speedLimitSpinButtonM25.addEventListener("click", onClickSpeedLimitSpinButtonM25, { passive: true });
  speedLimitSpinButtonM10.addEventListener("click", onClickSpeedLimitSpinButtonM10, { passive: true });
  speedLimitSpinButtonM5.addEventListener("click", onClickSpeedLimitSpinButtonM5, { passive: true });
  speedLimitSpinButtonP5.addEventListener("click", onClickSpeedLimitSpinButtonP5, { passive: true });
  speedLimitSpinButtonP10.addEventListener("click", onClickSpeedLimitSpinButtonP10, { passive: true });
  speedLimitSpinButtonP25.addEventListener("click", onClickSpeedLimitSpinButtonP25, { passive: true });

  speedLimitStore.listen(onChangeSpeedLimitStore);
</script>
