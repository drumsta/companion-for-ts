---
import PAutocomplete from "@components/generic/PAutocomplete.astro";
import PSidebar from "@components/generic/PSidebar.astro";
import PSvg from "@components/generic/PSvg.astro";
import { rtlLanguages } from "@src/i18n";
import { detectLocaleFromPath } from "astro-i18next";
import { t } from "i18next";

const { pathname } = Astro.url;
const lang = detectLocaleFromPath(pathname);
const direction = rtlLanguages.has(lang) ? "rtl" : "ltr";
---

<!-- Train Selection -->
<button
  type="button"
  id="train-helper-button"
  class="absolute border-color-border border top-52 p-0 ltr:right-0 ltr:rounded-r-none rtl:left-0 rtl:rounded-l-none"
  tabindex="0"
  aria-label={t("components.train-helper.train-helper")}
>
  <PSvg name="settings" svgClass="h-12" />
</button>
<PSidebar
  id="train-helper-sidebar"
  side={direction === "ltr" ? "right" : "left"}
  className="bg-color-bg border-color-border"
>
  <div class="flex flex-col">
    <PAutocomplete
      id="rolling-stock-class-search"
      src="/json/rolling-stock-class-search.json"
      className="text-color-text bg-color-bg-subtle"
    >
      <template slot="results-item-template" is:raw>
        <div class="hover:bg-color-bg-accent hover:underline">{{ value }}</div>
      </template>
    </PAutocomplete>
  </div>
</PSidebar>

<script>
  import { SpeedLimitStore, speedLimitStore } from "@src/stores/speedLimitStore";

  const trainHelper = "trainHelper";
  const trainHelperButton = document.getElementById("train-helper-button") as HTMLElement;
  const trainHelperSidebar = document.getElementById("train-helper-sidebar") as HTMLElement;
  const rollingStockSearch = document.getElementById("rolling-stock-class-search") as HTMLInputElement;

  // Elements Update

  // View Update
  const initView = function initView(): void {
    rollingStockSearch.setAttribute("value", speedLimitStore.value.rollingStock ?? "");
  };

  const updateSidebarView = function updateSidebarView(): void {
    trainHelperSidebar.toggleAttribute("open");
  };

  const updateRollingStockView = function updateRollingStockView(newValue: string): void {
    rollingStockSearch.setAttribute("value", newValue);
  };

  // State Update
  const setRollingStockState = function setRollingStockState(newValue: string): void {
    speedLimitStore.setKey("rollingStock", newValue, trainHelper);
  };

  // Events
  const onClickTrainHelperButton = function onClickTrainHelperButton(event: Event): void {
    if (!event.currentTarget) return;

    updateSidebarView();
  };

  const onChangeRollingStockSearch = function onChangeRollingStockSearch(event: Event): void {
    if (!event.currentTarget) return;

    const newValue = rollingStockSearch.value;

    setRollingStockState(newValue);
  };

  const onChangeSpeedLimitStore = function onChangeSpeedLimitStore(
    key: keyof SpeedLimitStore,
    value: SpeedLimitStore[keyof SpeedLimitStore] | undefined,
    source?: string,
  ): void {
    if (source === trainHelper || typeof value === "undefined") return;

    if (key === "rollingStock" && value !== "") {
      const newValue = value.toString();
      updateRollingStockView(newValue);
    }
  };

  // Init
  initView();

  trainHelperButton.addEventListener("click", onClickTrainHelperButton, { passive: true });
  rollingStockSearch.addEventListener("change", onChangeRollingStockSearch, { passive: true });

  speedLimitStore.listen(onChangeSpeedLimitStore);
</script>
