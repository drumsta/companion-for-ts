---
import i18next, { t } from "i18next";

const cL: string = i18next.language;
const sUO: { key: string; value: string }[] = [
  { key: "km/h", value: t("components.speed-limit.kph") },
  { key: "mph", value: t("components.speed-limit.mph") },
];
const defaultSL = 60;
const minMS = 30;
const maxMS = 300;
const defaultMS = 120;
const defaultSU = "km/h";
const alternateSU = "mph";
const maxSpeedInfoText: string = t("components.speed-limit.max-speed");
const defaultRadioButtonClass =
  "p-radio-button justify-center items-center select-none border-color border-1 rounded-md cursor-pointer";
const uncheckedRadioButtonClass = "bg-color-subtle text-color";
const checkedRadioButtonClass = "bg-color-primary-dark text-color-light";
---

<!-- Speed Limit Component-->
<amp-script
  id="speed-limit-amp-script"
  layout="flex-item"
  script="speed-limit-script"
>
  <div
    id="speed-limit-section"
    title={t("components.speed-limit.title")}
    class="flex flex-col justify-center items-center"
  >
    <!-- Max Speed Info & Speed Units Selector -->
    <div class="flex flex-row items-center">
      <!-- Max Speed Info -->
      <span id="ms-info">
        {maxSpeedInfoText.replace("{{maxSpeed}}", defaultMS.toLocaleString(cL))}
      </span>
      <!-- Speed Units Selector - Radio button -->
      <div
        id="sus"
        data-su
        class="flex flex-row"
        style="margin-top: 0.125rem;margin-left: 0.5rem;"
        role="radiogroup"
        aria-label={t("components.speed-limit.select-speed-units")}
      >
        {
          sUO.map((option: { key: string; value: string }) => <div
              id={`sus-${option.key}`}
              data-key={option.key}
              class={defaultRadioButtonClass}
              style="margin: 0px;padding-top: 0.25rem;padding-bottom: 0.25rem;padding-left: 1rem;padding-right: 1rem;"
              tabindex="0"
              role="radio"
              aria-label={option.value}
              aria-checked="false"
            >
              <span>{option.value}</span>
            </div>)
        }
      </div>
    </div>
    <!-- Max Speed Selector - Slider -->
    <div
      class="relative select-none"
      style="height: 2.25rem;width: 18.75rem;margin-top: 1rem;padding: 0.125rem;"
    >
      <input
        type="range"
        id="mss"
        min={minMS}
        max={maxMS}
        value={defaultMS}
        step="10"
        list="mss-values"
        class="block"
        style="width: 100%;"
        aria-labelledby="ms-info"
      />
      <datalist
        id="mss-values"
        class="flex justify-between text-base"
        style="padding-top: 0.625rem;"
      >
        <option value="30" label={(30).toLocaleString(cL)}
          >{(30).toLocaleString(cL)}</option
        >
        <option value="90" label={(90).toLocaleString(cL)}
          >{(90).toLocaleString(cL)}</option
        >
        <option value="160" label={(160).toLocaleString(cL)}
          >{(160).toLocaleString(cL)}</option
        >
        <option value="230" label={(230).toLocaleString(cL)}
          >{(230).toLocaleString(cL)}</option
        >
        <option value="300" label={(300).toLocaleString(cL)}
          >{(300).toLocaleString(cL)}</option
        >
      </datalist>
    </div>
    <!-- Speed Limit Selector - Knob -->
    <div style="margin-top: 1.5rem;padding: 0.625rem;">
      <svg
        id="sls"
        width="300"
        height="300"
        viewBox="0 0 100 100"
        class="cursor-grab"
        tabindex="0"
        role="slider"
        aria-valuemin="0"
        aria-valuemax={defaultMS}
        aria-valuenow={defaultSL}
        aria-label={t("components.speed-limit.speed-limit")}
      >
        <path
          id="slspn"
          class="fill-none stroke-color-negative-dark"
          d="M 30 84.64 A 40 40 0 1 1 70 84.64"
          stroke-width="14"></path>
        <path
          id="slspp"
          class="fill-none stroke-color-positive-dark"
          d="M 30 84.64 A 40 40 0 0 1 50 10"
          stroke-width="14"></path>
        <text
          id="sls-text-1"
          x="50"
          y="47"
          text-anchor="middle"
          class="fill-text-color text-center text-xl select-none"
        >
          {defaultSL.toLocaleString(cL)}
        </text>
        <text
          id="sls-text-2"
          x="50"
          y="68"
          text-anchor="middle"
          class="fill-text-color text-center text-xl select-none"
        >
          {defaultSU}
        </text>
        <text
          id="sls-text-3"
          x="50"
          y="89"
          text-anchor="middle"
          class="fill-text-color text-center select-none"
          style="font-size: 0.5rem;"
        >
          {alternateSU}
        </text>
      </svg>
    </div>
    <!-- Speed Limit Quick Buttons -->
    <div
      id="slsb"
      class="flex justify-center"
      style="height: 3.25rem"
      tabindex="0"
      role="spinbutton"
      aria-valuemin="0"
      aria-valuemax={defaultMS}
      aria-valuenow={defaultSL}
      aria-label={t("components.speed-limit.speed-limit")}
    >
      <button
        id="slsb-m-25"
        class="bg-color-negative-dark text-color-light"
        style="width: 3.25rem;">-25</button
      >
      <button
        id="slsb-m-10"
        class="bg-color-negative-dark text-color-light"
        style="width: 3.25rem;">-10</button
      >
      <button
        id="slsb-m-5"
        class="bg-color-negative-dark text-color-light"
        style="width: 3.25rem;">-5</button
      >
      <button
        id="slsb-p-5"
        class="bg-color-positive-dark text-color-light"
        style="width: 3.25rem;">+5</button
      >
      <button
        id="slsb-p-10"
        class="bg-color-positive-dark text-color-light"
        style="width: 3.25rem;">+10</button
      >
      <button
        id="slsb-p-25"
        class="bg-color-positive-dark text-color-light"
        style="width: 3.25rem;margin-right: 0.5rem;">+25</button
      >
    </div>
  </div>
</amp-script>
<script
  id="speed-limit-script"
  type="text/plain"
  target="amp-script"
  define:vars={{
    cL,
    defaultSL,
    minMS,
    maxMS,
    defaultMS,
    defaultSU,
    sUO,
    maxSpeedInfoText,
    defaultRadioButtonClass,
    uncheckedRadioButtonClass,
    checkedRadioButtonClass,
  }}
>
  /*
   * Variables
   */
  const maxSpeedInfo = document.getElementById("ms-info");
  const sUSelector = document.getElementById("sus");
  const maxSS = document.getElementById("mss");
  const sLS = document.getElementById("sls");
  const sLSPN = document.getElementById("slspn");
  const sLSPP = document.getElementById("slspp");
  const sLSText1 = document.getElementById("sls-text-1");
  const sLSText2 = document.getElementById("sls-text-2");
  const sLSText3 = document.getElementById("sls-text-3");
  const sLSB = document.getElementById("slsb");
  const sLSBM25 = document.getElementById("slsb-m-25");
  const sLSBM10 = document.getElementById("slsb-m-10");
  const sLSBM5 = document.getElementById("slsb-m-5");
  const sLSBP5 = document.getElementById("slsb-p-5");
  const sLSBP10 = document.getElementById("slsb-p-10");
  const sLSBP25 = document.getElementById("slsb-p-25");

  let sU = localStorage.getItem("app/speed-units") ?? defaultSU;
  let mS = Number(localStorage.getItem("app/speed-max") ?? defaultMS);
  let sL = Number(localStorage.getItem("app/speed-limit") ?? defaultSL);
  const minSpeed = 0;
  const sLStep = 5;
  const p = { passive: true };
  let sLSCoords = { left: 0, top: 0 };

  const radius = 40;
  const midX = 50;
  const midY = 50;
  const minRadians = (4 * Math.PI) / 3;
  const maxRadians = -Math.PI / 3;
  const minX = midX + (Math.cos(minRadians) * radius);
  const minY = midY - (Math.sin(minRadians) * radius);
  const maxX = midX + (Math.cos(maxRadians) * radius);
  const maxY = midY - (Math.sin(maxRadians) * radius);

  const rangePath = function rangePath() {
    return `M ${minX} ${minY} A ${radius} ${radius} 0 1 1 ${maxX} ${maxY}`;
  };

  const mapRange = function mapRange(x, inMin, inMax, outMin, outMax) {
    return (((x - inMin) * (outMax - outMin)) / (inMax - inMin)) + outMin;
  };

  const zeroRadians = function zeroRadians() {
    if (minSpeed > 0 && mS > 0) return mapRange(minSpeed, minSpeed, mS, minRadians, maxRadians);

    return mapRange(0, minSpeed, mS, minRadians, maxRadians);
  };

  const valueRadians = function valueRadians() {
    return mapRange(sL, minSpeed, mS, minRadians, maxRadians);
  };

  const zeroX = function zeroX() {
    return midX + (Math.cos(zeroRadians()) * radius);
  };

  const zeroY = function zeroY() {
    return midY - (Math.sin(zeroRadians()) * radius);
  };

  const largeArc = function largeArc() {
    return Math.abs(zeroRadians() - valueRadians()) < Math.PI ? 0 : 1;
  };

  const sweep = function sweep() {
    return valueRadians() > zeroRadians() ? 0 : 1;
  };

  const valueX = function valueX() {
    return midX + (Math.cos(valueRadians()) * radius);
  };

  const valueY = function valueY() {
    return midY - (Math.sin(valueRadians()) * radius);
  };

  const valuePath = function valuePath() {
    return `M ${zeroX()} ${zeroY()} A ${radius} ${radius} 0 ${largeArc()} ${sweep()} ${valueX()} ${valueY()}`;
  };

  const convertSL = function convertSL() {
    const mphToKmhFactor = 1.609344;
    if (sU === "km/h") return sL / mphToKmhFactor;
    if (sU === "mph") return sL * mphToKmhFactor;
    return 0;
  };

  const normSV = function normSV(speed) {
    if (speed >= 10) return speed.toFixed(0).toLocaleString(cL);
    if (speed < 10 && speed > 0) return speed.toFixed(1).toLocaleString(cL);
    return speed.toLocaleString(cL);
  };

  const setSUOS = function setSUOS(option) {
    const sUSO = document.getElementById(`sus-${option.key}`);

    if (option.key === sU) {
      sUSO.className = `${defaultRadioButtonClass} ${checkedRadioButtonClass}`;
      sUSO.setAttribute("aria-checked", "true");
    } else {
      sUSO.className = `${defaultRadioButtonClass} ${uncheckedRadioButtonClass}`;
      sUSO.setAttribute("aria-checked", "false");
    }
  };

  const setSUS = function setSUS() {
    localStorage.setItem("app/speed-units", sU);
    sUSelector.setAttribute("data-su", sU);
    sUO.forEach(setSUOS);
  };

  const setMSS = function setMSS() {
    if (mS < minMS) mS = minMS;
    if (mS > maxMS) mS = maxMS;
    if (mS < sL) sL = mS;
    localStorage.setItem("app/speed-max", mS);
    maxSpeedInfo.innerHTML = maxSpeedInfoText.replace("{{maxSpeed}}", mS.toLocaleString(cL));
  };

  const setSLS = function setSLS() {
    if (typeof sL === "undefined") sL = 0;
    if (isNaN(sL)) sL = 0;
    if (sL < 0) sL = 0;
    if (sL > mS) sL = mS;
    localStorage.setItem("app/speed-limit", sL);
    sLS.setAttribute("aria-valuemax", mS);
    sLS.setAttribute("aria-valuenow", sL);
    sLSPN.setAttribute("d", rangePath());
    sLSPP.setAttribute("d", valuePath());
    sLSText1.innerHTML = sL.toLocaleString(cL);
    sLSText2.innerHTML = sU;
    const alternateSU = sUO.find((option) => option.key !== sU).value;
    sLSText3.innerHTML = `${normSV(convertSL())} ${alternateSU}`;
    sLSB.setAttribute("aria-valuemax", mS);
    sLSB.setAttribute("aria-valuenow", sL);
  };

  const calcSL = function calcSL(offsetX, offsetY) {
    const sLSSize = sLS.getAttribute("width");
    const dx = offsetX - (sLSSize / 2);
    const dy = (sLSSize / 2) - offsetY;
    const angle = Math.atan2(dy, dx);
    const start = (-Math.PI / 2) - (Math.PI / 6);
    let mappedValue = 0;
    if (angle > maxRadians) mappedValue = mapRange(angle, minRadians, maxRadians, minSpeed, mS);
    else if (angle < start) mappedValue = mapRange(angle + (2 * Math.PI), minRadians, maxRadians, minSpeed, mS);
    else return sL;

    return (Math.round((mappedValue - minSpeed) / sLStep) * sLStep) + minSpeed;
  };

  const oCSUO = function oCSUO(event) {
    const newKey = event.currentTarget.getAttribute("data-key");
    if (newKey === sU) return;
    sU = newKey;
    setSUS();
    setSLS();
  };

  const oIMaxSS = function oIMaxSS(event) {
    const newValue = event.currentTarget.value;
    if (newValue === mS) return;
    mS = newValue;
    setMSS();
    setSLS();
  };

  const oCSLS = function oCSLS(event) {
    const newValue = calcSL(event.offsetX, event.offsetY);
    if (newValue === sL) return;
    sL = newValue;
    setSLS();
  };

  const oMMSLS = function oMMSLS(event) {
    oCSLS(event);
  };

  const oMUSLS = function oMUSLS(_event) {
    sLS.removeEventListener("mousemove", oMMSLS);
    sLS.removeEventListener("mouseup", oMUSLS);
  };

  const oMDSLS = function oMDSLS(_event) {
    sLS.addEventListener("mousemove", oMMSLS, p);
    sLS.addEventListener("mouseup", oMUSLS, p);
  };

  const oTMSLS = function oTMSLS(event) {
    if (event.touches.length !== 1) return;
    const [touch] = event.touches;
    event.offsetX = touch.clientX - sLSCoords.left;
    event.offsetY = touch.clientY - sLSCoords.top;
    oCSLS(event);
  };

  const oTESLS = function oTESLS(_event) {
    sLS.removeEventListener("touchmove", oTMSLS);
    sLS.removeEventListener("touchend", oTESLS);
  };

  const oTSSLS = function oTSSLS(_event) {
    sLS.addEventListener("touchmove", oTMSLS, p);
    sLS.addEventListener("touchend", oTESLS, p);
  };

  const oCSLSBM25 = function oCSLSBM25(_event) {
    sL -= 25;
    setSLS();
  };

  const oCSLSBM10 = function oCSLSBM10(_event) {
    sL -= 10;
    setSLS();
  };

  const oCSLSBM5 = function oCSLSBM5(_event) {
    sL -= 5;
    setSLS();
  };

  const oCSLSBP5 = function oCSLSBP5(_event) {
    sL += 5;
    setSLS();
  };

  const oCSLSBP10 = function oCSLSBP10(_event) {
    sL += 10;
    setSLS();
  };

  const oCSLSBP25 = function oCSLSBP25(_event) {
    sL += 25;
    setSLS();
  };

  maxSS.value = mS;

  setMSS();
  setSUS();
  setSLS();

  sUO.forEach((option) => {
    const sUSO = document.getElementById(`sus-${option.key}`);
    sUSO.addEventListener("click", oCSUO, p);
  });
  maxSS.addEventListener("input", oIMaxSS, p);
  sLS.addEventListener("click", oCSLS, p);
  sLS.addEventListener("mousedown", oMDSLS, p);
  sLS.addEventListener(
    "touchstart",
    (event) => {
      event.target.getBoundingClientRectAsync().then((coords) => {
        sLSCoords = coords;
      });

      oTSSLS();
    },
    p
  );
  sLSBM25.addEventListener("click", oCSLSBM25, p);
  sLSBM10.addEventListener("click", oCSLSBM10, p);
  sLSBM5.addEventListener("click", oCSLSBM5, p);
  sLSBP5.addEventListener("click", oCSLSBP5, p);
  sLSBP10.addEventListener("click", oCSLSBP10, p);
  sLSBP25.addEventListener("click", oCSLSBP25, p);
</script>
