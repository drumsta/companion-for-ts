---
/* eslint @typescript-eslint/no-explicit-any: 0 */
import chroma from "chroma-js";
import BaseLayout from "@layouts/BaseLayout.astro";
import { changeLanguage, t } from "i18next";

changeLanguage("lt");

const title: string = t("pages.colors.title");
const description: string = t("pages.colors.description");
const color1 = "#F3F3F3";
const colorHueCorrection = -10;
const colorBase = "#FFFFFF";
const colorBaseLuminance: number = chroma(colorBase).luminance();
const color1Luminance: number = chroma(color1).luminance();
const colorGrades: number[] = [...Array(202).keys()].map((i) => (i * 0.5) - 0.5);
const colorFamilies: string[] = [
    "",
    "White",
    "Red",
    "Orange",
    "Amber",
    "Yellow",
    "Lime",
    "Green",
    "Emerald",
    "Teal",
    "Aqua",
    "Cyan",
    "Sky",
    "Blue",
    "Indigo",
    "Violet",
    "Purple",
    "Fuchsia",
    "Pink",
    "Rose",
];
const colorValues: string[] = [
    "",
    "#FFFFFF",
    "#FF0000",
    "#FF8000",
    "#FFC000",
    "#FFFF00",
    "#80FF00",
    "#00FF00",
    "#00FF80",
    "#00FFC0",
    "#00FFFF",
    "#00C0FF",
    "#0080FF",
    "#0000FF",
    "#4000FF",
    "#8000FF",
    "#C000FF",
    "#FF00FF",
    "#FF0080",
    "#FF0040",
];
const calcColor = function calcColor(grade: number, col: number): any {
    const color = chroma(colorValues[col]);
    const colorLch = color.lch();
    const colorLchLightness = chroma(grade, colorLch[1], colorLch[2], "lch");
    // Console.log(color1luminance);
    const contrastRatio: number = Math.round(((21 * Math.exp(-0.030445224 * grade)) + Number.EPSILON) * 100) /
        100;
    const contrastRatioInverted: number = 1 / contrastRatio;
    const color2Luminance: number = colorBaseLuminance > 0.5
        ? (contrastRatioInverted * (colorBaseLuminance + 0.05)) - 0.05
        : ((colorBaseLuminance + 0.05) / contrastRatioInverted) - 0.05;
    const color2Temp = colorLchLightness.luminance(color2Luminance, "lch");
    const color2 = color2Temp.set("lch.h", Number(color2Temp.lch()[2]) + colorHueCorrection);
    return color2;
};
const calcContrastRatio = function calcContrastRatio(grade: number): number {
    const color2 = calcColor(grade, 1);
    const color2Luminance: number = color2.luminance();
    const ratio: number = 1 /
        (color1Luminance > color2Luminance
            ? (color2Luminance + 0.05) / (color1Luminance + 0.05)
            : (color1Luminance + 0.05) / (color2Luminance + 0.05));
    const contrastRatio: number = Math.round((ratio + Number.EPSILON) * 100) / 100;
    // Const contrastRatio: number = Math.round((21 * Math.exp(-0.030445224 * grade) + Number.EPSILON) * 100) / 100;
    return contrastRatio;
};
const applyLightness = function applyLightness(grade: number, col: number): string {
    const color2 = calcColor(grade, col);
    const color2hex = color2.hex().toUpperCase();
    return color2hex;
};
---

<BaseLayout title={title} description={description}>
  <header class="flex flex-col justify-center items-center">
    <h1>{t("pages.colors.header")}</h1>
  </header>
  <main class="flex flex-col justify-center items-center">
    <table>
      <thead>
        <tr>
          {
            colorFamilies.map((family: string, col: number) => (col === 0 ? <th>&nbsp</th> : <th>{family}</th>))
          }
        </tr>
      </thead>
      <tbody>
        {
          colorGrades.map((grade: number, row: number) => (
            row === 0
              ? <tr />
              : <tr>
                {colorFamilies.map((_family: string, col: number) => (
                  col === 0
                    ? <th>{`${grade} - ${calcContrastRatio(grade)}`}</th>
                    : <td
                      style={`background-color: ${
                        color1Luminance > 0.5
                          ? applyLightness(grade, col)
                          : color1
                      };color: ${
                        color1Luminance > 0.5
                          ? color1
                          : applyLightness(grade, col)
                      };`}
                    >
                      <div>{`${applyLightness(grade, col)}`}</div>
                    </td>
                ))}
              </tr>
          ))
        }
      </tbody>
    </table>
  </main>
</BaseLayout>
